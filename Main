package com.example.fx;

import javafx.application.Application;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.fxml.FXMLLoader;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.stage.Stage;
import javafx.scene.paint.Color;

import java.io.IOException;

public class Main extends Application {

    private Deck deck = new Deck();
    private Hand player1,player2;
    private Text message = new Text();

    private SimpleBooleanProperty play = new SimpleBooleanProperty(false);

    private HBox player1Cards = new HBox(20);
    private HBox player2Cards = new HBox(20);

    int p1points; //Points for player 1
    int p2points; //Points for player 2

    private Parent create(){
        player1 = new Hand(player1Cards.getChildren());
        player2 = new Hand(player2Cards.getChildren());

        Pane root = new Pane();
        root.setPrefSize(800, 600);

        Region background = new Region();                                    //Sets Background for the game
        background.setPrefSize(800, 600);
        background.setStyle("-fx-background-color: rgba(164, 81, 169, 1)");

        HBox rootLayout = new HBox(5);                                    //Left display side of Game
        rootLayout.setPadding(new Insets(5, 5, 5, 5));
        Rectangle left = new Rectangle(550, 560);
        left.setArcWidth(50);
        left.setArcHeight(50);
        left.setFill(Color.TEAL);

        Rectangle right = new Rectangle(230, 560);                     //Right display side of Game
        right.setArcWidth(50);
        right.setArcHeight(50);
        right.setFill(Color.DARKRED);


        // LEFT
        VBox leftVBox = new VBox(50);
        leftVBox.setAlignment(Pos.TOP_CENTER);

        Text player1Score = new Text("Player 1: ");
        Text player2Score = new Text("Player 2: ");

        leftVBox.getChildren().addAll(player1Score, player1Cards, message, player2Cards, player2Score);

        // RIGHT

        VBox rightVBox = new VBox(20);
        rightVBox.setAlignment(Pos.CENTER);


        Text pointsp1 = new Text("Points: "); //Display points for player 1
        Text pointsp2 = new Text("Points: "); //Display points for player 2


        Button btnPlay = new Button("PLAY");


        HBox buttonsHBox = new HBox(15, btnPlay);
        buttonsHBox.setAlignment(Pos.CENTER);

        rightVBox.getChildren().addAll(btnPlay, pointsp1,pointsp2, buttonsHBox);

        // ADD BOTH STACKS TO ROOT LAYOUT

        rootLayout.getChildren().addAll(new StackPane(left, leftVBox), new StackPane(right, rightVBox));
        root.getChildren().addAll(background, rootLayout);

        // BIND PROPERTIES

        btnPlay.disableProperty().bind(play.not());


        player2Score.textProperty().bind(new SimpleStringProperty("Player 2: ").concat(player1.valueProperty().asString()));
        player1Score.textProperty().bind(new SimpleStringProperty("Player 1: ").concat(player2.valueProperty().asString()));

        player1.valueProperty().addListener((obs, old, newValue) -> {
            if (newValue.intValue() > player2.vauleProperty) {
                p1points++;
            }
        }


        player2.valueProperty().addListener((obs, old, newValue) -> {
                    if (newValue.intValue() > player1.vauleProperty) {
                        p2points++;
                    }
        }




        // INIT BUTTONS

        btnPlay.setOnAction(event -> {            //Hitting "play" button starts new game with newly drawn cards
            startNewGame();
        });

        btnHit.setOnAction(event -> {
            player1.takeCard(deck.drawCard());
            player2.takeCard(deck.drawCard());
        });



        return root;
    }


    private void startNewGame() {
        play.set(true);
        message.setText("");

        deck.refill();

        player1.reset();
        player2.reset();

        player1.takeCard(deck.drawCard());    //Each player gets one card
        player2.takeCard(deck.drawCard());

    }

    private void endGame() {
        play.set(false);

        int player1Value = player1.valueProperty().get();
        int player2Value = player2.valueProperty().get();
        String winner = "Exceptional case: d: " + player1Value + " p: " + player2Value;


        if (player1Value > player2Value) {        //Checks which player wins based on vaule
            winner = "Player 1";
        }
        else if (player2Value > player1Value) {
            winner = "Player 2";
        }

        message.setText(winner + " WON");
    }



    @Override
            public void start(Stage primaryStage) throws Exception {
                primaryStage.setScene(new Scene(create()));
                primaryStage.setWidth(800);
                primaryStage.setHeight(600);
                primaryStage.setResizable(false);
                primaryStage.setTitle("Trojan War");
                primaryStage.show();
            }

            public static void main(String[] args) {
                launch(args);
            }
}
